# coding: utf-8

"""
    🎤 Voicer API - Система озвучки текста

     ## 🎯 **Описание сервиса**  **Voicer API** — это современная система для преобразования текста в речь с использованием технологий ElevenLabs.  ### ✨ **Основные возможности:** - 🎭 **Более 50 голосов** различных языков и стилей - 🚀 **Быстрая обработка** больших текстов (до 500,000 символов) - 📊 **Отслеживание прогресса** выполнения задач в реальном времени - 🔒 **Безопасная авторизация** по токенам - 📱 **Простая интеграция** через REST API  ### 🌐 **Базовый URL:** ``` http://elevenlabs-unlimited.net:8000/api/v1 ```  ### 🔑 **Авторизация:** Все запросы требуют заголовок авторизации: ``` Authorization: Bearer YOUR_API_TOKEN ```  ### 📋 **Поддерживаемые модели:** - `eleven_multilingual_v2` — Многоязычная модель (рекомендуется) - `eleven_turbo_v2` — Быстрая модель для коротких текстов   - `eleven_turbo_v2_5` — Улучшенная быстрая модель - `eleven_v3` — Новейшая модель с улучшенным качеством - `eleven_flash_v2_5` — Просто быстрая модель, хз как подписать - `eleven_flash_v2` — Просто быстрая модель, хз как подписать ### 📞 **Поддержка:**  - 💬 Telegram: @mat3u     

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateUserRequest(BaseModel):
    """
    ## 👤 Запрос на создание нового пользователя  Модель данных для создания нового пользователя через API.
    """ # noqa: E501
    telegram_user_id: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Уникальный ID пользователя в Telegram")
    telegram_username: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    subscription_type: Optional[StrictStr] = Field(default='no_subscription', description="Тип подписки: 'characters', 'unlimited' или 'no_subscription'")
    total_characters: Optional[Annotated[int, Field(le=10000000, strict=True, ge=0)]] = None
    unlimited_days: Optional[Annotated[int, Field(le=3650, strict=True, ge=1)]] = None
    expires_datetime: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["telegram_user_id", "telegram_username", "subscription_type", "total_characters", "unlimited_days", "expires_datetime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if telegram_username (nullable) is None
        # and model_fields_set contains the field
        if self.telegram_username is None and "telegram_username" in self.model_fields_set:
            _dict['telegram_username'] = None

        # set to None if total_characters (nullable) is None
        # and model_fields_set contains the field
        if self.total_characters is None and "total_characters" in self.model_fields_set:
            _dict['total_characters'] = None

        # set to None if unlimited_days (nullable) is None
        # and model_fields_set contains the field
        if self.unlimited_days is None and "unlimited_days" in self.model_fields_set:
            _dict['unlimited_days'] = None

        # set to None if expires_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.expires_datetime is None and "expires_datetime" in self.model_fields_set:
            _dict['expires_datetime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "telegram_user_id": obj.get("telegram_user_id"),
            "telegram_username": obj.get("telegram_username"),
            "subscription_type": obj.get("subscription_type") if obj.get("subscription_type") is not None else 'no_subscription',
            "total_characters": obj.get("total_characters"),
            "unlimited_days": obj.get("unlimited_days"),
            "expires_datetime": obj.get("expires_datetime")
        })
        return _obj


