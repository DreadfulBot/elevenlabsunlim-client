# coding: utf-8

"""
    🎤 Voicer API - Система озвучки текста

     ## 🎯 **Описание сервиса**  **Voicer API** — это современная система для преобразования текста в речь с использованием технологий ElevenLabs.  ### ✨ **Основные возможности:** - 🎭 **Более 50 голосов** различных языков и стилей - 🚀 **Быстрая обработка** больших текстов (до 500,000 символов) - 📊 **Отслеживание прогресса** выполнения задач в реальном времени - 🔒 **Безопасная авторизация** по токенам - 📱 **Простая интеграция** через REST API  ### 🌐 **Базовый URL:** ``` http://elevenlabs-unlimited.net:8000/api/v1 ```  ### 🔑 **Авторизация:** Все запросы требуют заголовок авторизации: ``` Authorization: Bearer YOUR_API_TOKEN ```  ### 📋 **Поддерживаемые модели:** - `eleven_multilingual_v2` — Многоязычная модель (рекомендуется) - `eleven_turbo_v2` — Быстрая модель для коротких текстов   - `eleven_turbo_v2_5` — Улучшенная быстрая модель - `eleven_v3` — Новейшая модель с улучшенным качеством - `eleven_flash_v2_5` — Просто быстрая модель, хз как подписать - `eleven_flash_v2` — Просто быстрая модель, хз как подписать ### 📞 **Поддержка:**  - 💬 Telegram: @mat3u     

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class UserStats(BaseModel):
    """
    ## 📈 Статистика использования API  Подробная информация об использовании API текущим пользователем.  **Типы подписки:**  **🔴 Без подписки (`no_subscription`):** - Все поля символов = 0 - API недоступно до покупки подписки  **♾️ Безлимитная подписка (`unlimited`):** - `total_characters` = 0 (безлимит) - `used_characters` = реальное количество использованных символов (для статистики) - `remaining_characters` = 0 (неограниченно) - Неограниченное использование API  **📝 Подписка по символам (`characters`):** - Показываются реальные значения лимитов и использования - `used_characters` считается динамически по завершенным задачам
    """ # noqa: E501
    user_id: StrictStr = Field(description="Уникальный идентификатор пользователя")
    total_characters: StrictInt = Field(description="Общий лимит символов по тарифу (0 = безлимит/нет подписки)")
    used_characters: StrictInt = Field(description="Использовано символов (динамический подсчет по завершенным задачам)")
    remaining_characters: StrictInt = Field(description="Осталось символов (0 = безлимит/нет подписки)")
    total_tasks: StrictInt = Field(description="Всего создано задач")
    completed_tasks: StrictInt = Field(description="Успешно завершенных задач")
    active_tasks: StrictInt = Field(description="Задач в процессе выполнения")
    __properties: ClassVar[List[str]] = ["user_id", "total_characters", "used_characters", "remaining_characters", "total_tasks", "completed_tasks", "active_tasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "total_characters": obj.get("total_characters"),
            "used_characters": obj.get("used_characters"),
            "remaining_characters": obj.get("remaining_characters"),
            "total_tasks": obj.get("total_tasks"),
            "completed_tasks": obj.get("completed_tasks"),
            "active_tasks": obj.get("active_tasks")
        })
        return _obj


