# coding: utf-8

"""
    🎤 Voicer API - Система озвучки текста

     ## 🎯 **Описание сервиса**  **Voicer API** — это современная система для преобразования текста в речь с использованием технологий ElevenLabs.  ### ✨ **Основные возможности:** - 🎭 **Более 50 голосов** различных языков и стилей - 🚀 **Быстрая обработка** больших текстов (до 500,000 символов) - 📊 **Отслеживание прогресса** выполнения задач в реальном времени - 🔒 **Безопасная авторизация** по токенам - 📱 **Простая интеграция** через REST API  ### 🌐 **Базовый URL:** ``` http://elevenlabs-unlimited.net:8000/api/v1 ```  ### 🔑 **Авторизация:** Все запросы требуют заголовок авторизации: ``` Authorization: Bearer YOUR_API_TOKEN ```  ### 📋 **Поддерживаемые модели:** - `eleven_multilingual_v2` — Многоязычная модель (рекомендуется) - `eleven_turbo_v2` — Быстрая модель для коротких текстов   - `eleven_turbo_v2_5` — Улучшенная быстрая модель - `eleven_v3` — Новейшая модель с улучшенным качеством - `eleven_flash_v2_5` — Просто быстрая модель, хз как подписать - `eleven_flash_v2` — Просто быстрая модель, хз как подписать ### 📞 **Поддержка:**  - 💬 Telegram: @mat3u     

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class VoiceRequest(BaseModel):
    """
    ## 📝 Запрос на создание задачи озвучки  Модель данных для создания новой задачи преобразования текста в речь.
    """ # noqa: E501
    text: Annotated[str, Field(min_length=1, strict=True, max_length=500000)] = Field(description="Текст для озвучки (от 1 до 500,000 символов)")
    voice_id: Optional[StrictStr] = Field(default='AB9XsbSA4eLG12t2myjN', description="Уникальный ID голоса ElevenLabs")
    model_id: Optional[StrictStr] = Field(default='eleven_multilingual_v2', description="ID модели для синтеза речи")
    voice_settings: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["text", "voice_id", "model_id", "voice_settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if voice_settings (nullable) is None
        # and model_fields_set contains the field
        if self.voice_settings is None and "voice_settings" in self.model_fields_set:
            _dict['voice_settings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "voice_id": obj.get("voice_id") if obj.get("voice_id") is not None else 'AB9XsbSA4eLG12t2myjN',
            "model_id": obj.get("model_id") if obj.get("model_id") is not None else 'eleven_multilingual_v2',
            "voice_settings": obj.get("voice_settings")
        })
        return _obj


